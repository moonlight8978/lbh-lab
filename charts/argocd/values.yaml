---
redis-ha:
  enabled: true

  redis:
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 500Mi

  haproxy:
    resources:
      requests:
        memory: 64Mi
        cpu: 50m

    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ template "redis-ha.name" . }}-haproxy
                release: {{ .Release.Name }}
            topologyKey: kubernetes.io/hostname
            matchLabelKeys:
            - pod-template-hash

controller:
  replicas: 1

  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 10m
      memory: 64Mi

server:
  replicas: 1

  ingress:
    enabled: true
    ingressClassName: traefik-internal
    annotations:
      cert-manager.io/cluster-issuer: intermediate-ca
      cert-manager.io/common-name: &cn argocd.10.242.20.150.sslip.io
      cert-manager.io/subject-organizations: LBH Lab
      cert-manager.io/subject-organizationalunits: ArgoCD
      cert-manager.io/subject-countries: VN
      cert-manager.io/duration: 720h
      cert-manager.io/renew-before: 72h
    hostname: *cn
    tls: false
    extraTls:
      - secretName: argocd.sslip.io
        hosts:
          - *cn

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

repoServer:
  replicas: 1

  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi

dex:
  resources:
    limits:
      memory: 64Mi
    requests:
      cpu: 10m
      memory: 32Mi

configs:
  cm:
    admin.enabled: true
    application.instanceLabelKey: argocd.argoproj.io/instance
    kustomize.enabled: true
    kustomize.buildOptions: --enable-helm --load-restrictor LoadRestrictionsNone

    resource.customizations.ignoreDifferences.monitoring.coreos.com_ServiceMonitor:
      |
      jqPathExpressions:
      - '.spec.endpoints[].relabelings[].action'

  # rbac:
  #   policy.csv: |
  #     g, Admin, role:admin

notifications:
  enabled: true
  secret:
    create: false
  notifiers:
    service.github: |
      appID: $githubAppId
      installationID: $githubInstallationId
      privateKey: $githubPrivateKey
    service.telegram: |
      token: $telegramToken
  triggers:
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  templates:
    template.app-deployed: |
      message: |
        Application {{.app.metadata.name}} is now running new version of deployments manifests.
      github:
        repoURLPath: "{{(index .app.spec.sources 0).repoURL}}"
        revisionPath: "{{index .app.status.sync.revisions 0}}"
        status:
          state: success
          label: "continuous-delivery/{{.app.metadata.name}}"
          targetURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
        deployment:
          state: success
          environment: production
          logURL: "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
          requiredContexts: []
          autoMerge: true
          transientEnvironment: false
