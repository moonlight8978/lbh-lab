{"description":"Policy is the Schema for the policies API","type":"object","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"description":"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.","type":"object","properties":{"annotations":{"description":"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations","type":"object","additionalProperties":{"type":"string","default":""}},"creationTimestamp":{"description":"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.","type":"string","format":"date-time"},"deletionGracePeriodSeconds":{"description":"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.","type":"integer","format":"int64"},"deletionTimestamp":{"description":"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.","type":"string","format":"date-time"},"finalizers":{"description":"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.","type":"array","items":{"type":"string","default":""},"x-kubernetes-list-type":"set","x-kubernetes-patch-strategy":"merge"},"generateName":{"description":"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency","type":"string"},"generation":{"description":"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.","type":"integer","format":"int64"},"labels":{"description":"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels","type":"object","additionalProperties":{"type":"string","default":""}},"managedFields":{"description":"ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.","type":"array","items":{"description":"ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.","type":"object","properties":{"apiVersion":{"description":"APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.","type":"string"},"fieldsType":{"description":"FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"","type":"string"},"fieldsV1":{"description":"FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff","type":"object"},"manager":{"description":"Manager is an identifier of the workflow managing these fields.","type":"string"},"operation":{"description":"Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.","type":"string"},"subresource":{"description":"Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.","type":"string"},"time":{"description":"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.","type":"string","format":"date-time"}}},"x-kubernetes-list-type":"atomic"},"name":{"description":"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names","type":"string"},"namespace":{"description":"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces","type":"string"},"ownerReferences":{"description":"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.","type":"array","items":{"description":"OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.","type":"object","required":["apiVersion","kind","name","uid"],"properties":{"apiVersion":{"description":"API version of the referent.","type":"string","default":""},"blockOwnerDeletion":{"description":"If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.","type":"boolean"},"controller":{"description":"If true, this reference points to the managing controller.","type":"boolean"},"kind":{"description":"Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string","default":""},"name":{"description":"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names","type":"string","default":""},"uid":{"description":"UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids","type":"string","default":""}},"x-kubernetes-map-type":"atomic"},"x-kubernetes-list-map-keys":["uid"],"x-kubernetes-list-type":"map","x-kubernetes-patch-merge-key":"uid","x-kubernetes-patch-strategy":"merge"},"resourceVersion":{"description":"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency","type":"string"},"selfLink":{"description":"Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.","type":"string"},"uid":{"description":"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids","type":"string"}}},"spec":{"description":"PolicySpec defines the desired state of Policy\nName, ID and CreationTime are in Policy.ObjectMeta","type":"object","properties":{"actions":{"type":"array","items":{"description":"PolicyAction has an action to execute in a policy","type":"object","properties":{"action":{"description":"Action is the type of action to be performed for a policy when a task executes\nEquivalent swagger model: Action","type":"string"},"backupClusterParameters":{"description":"BackupClusterParameters contains parameters for the backup cluster action","type":"object","properties":{"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}}}},"backupParameters":{"description":"BackupParameters contains parameters for the backup action","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"expiresAt":{"type":"string","format":"date-time"},"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"hooks":{"description":"ActionHooks contains execution hooks to run before and after actions.","type":"object","properties":{"onFailure":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"onSuccess":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"preHook":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}}}},"ignoreExceptions":{"type":"boolean"},"imageRepoProfile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"profile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}}},"batchRestoreParameters":{"description":"BatchRestoreParameters defines parameters for batch restore operation","type":"object","required":["subjects"],"properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"artifactOverrideProfile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"dataOnly":{"type":"boolean"},"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"hooks":{"description":"ActionHooks contains execution hooks to run before and after actions.","type":"object","properties":{"onFailure":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"onSuccess":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"preHook":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}}}},"ignoreExceptions":{"type":"boolean"},"instantRecovery":{"type":"boolean"},"overwriteExisting":{"type":"boolean"},"pointInTime":{"type":"string","format":"date-time"},"profile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"restoreClusterResources":{"type":"boolean"},"restorePointsDiscoveryRange":{"description":"DateRange is a pair of dates representing a closed interval.\nDateRange with nil Start and End is an interval unbounded at both ends (-∞; +∞).","type":"object","properties":{"end":{"description":"End is an endpoint to make the interval right-bounded.\nNil makes the interval right-unbounded.","type":"string","format":"date-time"},"start":{"description":"Start is an endpoint to make the interval left-bounded.\nNil makes the interval left-unbounded.","type":"string","format":"date-time"}}},"skipWaitForWorkloadReady":{"type":"boolean"},"subjects":{"type":"array","items":{"description":"BatchRestoreSubject is a subject of batch restore operation","type":"object","required":["namespace"],"properties":{"namespace":{"type":"string"},"restorePointContentName":{"type":"string"},"restorePointName":{"type":"string"}}}},"targetNamespace":{"description":"The namespace into which something should be restored","type":"string"},"targetNamespacePrefix":{"type":"string"},"targetNamespaceSuffix":{"type":"string"},"targetVsphereStorage":{"type":"string"},"transforms":{"description":"TransformsOrRefs describes all transformations for a suite of resources","type":"array","items":{"description":"TransformOrRef holds transformation for a single resource type or a reference to some transform set.","type":"object","properties":{"transformSetRef":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}},"x-kubernetes-preserve-unknown-fields":true}},"virtualMachineParameters":{"description":"VirtualMachineParameters defines restore parameters specific to virtual machines.","type":"object","properties":{"harvester":{"description":"Harvester represents restore parameters specific to virtual machines on the Harvester platform.","type":"object","properties":{"overrideVolumeImages":{"description":"OverrideVolumeImages maps VM image PVCs to be restored to existing VM image references\n(identified by name and namespace). After the restore, all references to VM images\nin the selected VM image PVCs will be replaced with the provided new VM image references.","type":"object","additionalProperties":{"description":"HarvesterImageOverride specifies a VM image override used during restoring a virtual machine\nin Harvester.","type":"object","properties":{"ignoreChecks":{"description":"IgnoreChecks determines whether to skip VM image checksum validation during\nthe restore process. If set to true, the image will be used without verifying its integrity.\nThis is useful when intentionally using a different VM image than the one used in the backup.","type":"boolean"},"name":{"description":"Name of the VM image used for override.","type":"string"},"namespace":{"description":"Namespace where the VM image is located.","type":"string"}}}}}},"preserveVMMacAddresses":{"description":"PreserveVMMacAddresses specifies whether to retain the original MAC addresses\non all network interfaces of virtual machines after restore.","type":"boolean"}}},"volumeClones":{"type":"boolean"}}},"exportParameters":{"description":"ExportParameters Migration send policy","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"blockModeProfile":{"description":"BlockModeProfile is a reference to a profile that supports block based backup.\nIt should only be used when the infrastructure also supports block based backup.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"expiresAt":{"description":"Date of expiration for manual exports","type":"string","format":"date-time"},"exportData":{"description":"ExportData references backup portability settings.","type":"object","required":["enabled"],"properties":{"enabled":{"description":"Default backup portability setting.  Applicable to all storage classes\nunless overridden by settings in Overrides (below).","type":"boolean"},"exporterStorageClassName":{"description":"ExporterStorageClassName is an optional field used to specify the\ndefault storage class used to export data for volumes. Applicable to\nall volumes unless overridden by settings in Overrides (below).","type":"string"},"overrides":{"description":"Overrides is a slice of storage-specific backup portability settings.\nSetting here overrides the default setting above.","type":"array","items":{"description":"StorageOverride overrides export portability setting when exporting a volume.","type":"object","required":["enabled","storageClassName"],"properties":{"enabled":{"description":"Enabled, if set to true, calls for the contents of the volume snapshot\nto be serialized into a Location. If so, then its contents may be\nimported into any storage system.","type":"boolean"},"exporterStorageClassName":{"description":"ExporterStorageClassName is an optional field used to specify the name\nof the storage class used to export data for volumes that were created\nwith the storage class specified in `StorageClassName`","type":"string"},"storageClassName":{"description":"StorageClassName is used to match against a volume's storage class. Any\nvolumes with that storage class will use this StorageOverride.","type":"string"}}}}}},"frequency":{"description":"Frequency indicates valid frequency values","type":"string"},"hooks":{"description":"Hooks are references to kanister actions executed before or after export.","type":"object","properties":{"onFailure":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"onSuccess":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"preHook":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}}}},"ignoreExceptions":{"description":"Ignore exceptions during export runs\n\nDeprecated: Not considered for ExportActions but it is used in Empty() check. Not removing to avoid the risk of a repeat of K10-4340. See comment in K10-12992.","type":"boolean"},"migrationToken":{"description":"Reference to MigrationToken","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"profile":{"description":"Profile reference","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"receiveString":{"description":"Opaque string that describes where the migration artifacts are located.\nThis is used in the import parameters on the receiving side.","type":"string"},"volumeSnapshots":{"description":"VolumeSnapshots reference provider-specific snapshot and export settings.\nPresent only when supported provider is in use.","type":"object","properties":{"awsEbs":{"description":"AWS EBS specific volume snapshot settings.","type":"object","properties":{"destinationAccount":{"description":"Volume snapshot copy destination account.","type":"string"},"regions":{"description":"List of regions to copy snapshots to.","type":"array","items":{"type":"string"}}}},"azure":{"description":"Azure specific volume snapshot settings.","type":"object","properties":{"regions":{"description":"List of regions to copy snapshots to.","type":"array","items":{"type":"string"}},"resourceGroup":{"description":"ResourceGroup of the snapshots destination","type":"string"}}}}}}},"importParameters":{"description":"ImportParameters Migration send policy\nEquivalent swagger model: PolicyParametersMigrationImport","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"migrationToken":{"description":"Reference to MigrationToken","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"profile":{"description":"Profile reference","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"receiveString":{"description":"Opaque string that describes where to locate the artifacts to be imported.","type":"string"}}},"migrateFCDParameters":{"description":"MigrateFCDParameters defines parameters for migrate FCD operation","type":"object","properties":{"profile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"session":{"type":"string"},"targetStorage":{"type":"string"}}},"reportParameters":{"description":"ReportParameters report parameters","type":"object","properties":{"statsIntervalDays":{"type":"integer","format":"int32"},"statsIntervalHours":{"type":"integer","format":"int32"}}},"restoreClusterParameters":{"description":"RestoreClusterParameters restore parameters","type":"object","properties":{"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"hooks":{"description":"ActionHooks contains execution hooks to run before and after actions.","type":"object","properties":{"onFailure":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"onSuccess":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"preHook":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}}}},"transforms":{"description":"TransformsOrRefs describes all transformations for a suite of resources","type":"array","items":{"description":"TransformOrRef holds transformation for a single resource type or a reference to some transform set.","type":"object","properties":{"transformSetRef":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}},"x-kubernetes-preserve-unknown-fields":true}}}},"restoreParameters":{"description":"RestoreParameters restore parameters\nswagger:model RestoreParameters","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"artifactOverrideProfile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"dataOnly":{"type":"boolean"},"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"hooks":{"description":"ActionHooks contains execution hooks to run before and after actions.","type":"object","properties":{"onFailure":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"onSuccess":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}},"preHook":{"description":"ActionHook is a reference to an action within a Blueprint.","type":"object","properties":{"actionName":{"type":"string"},"blueprint":{"type":"string"},"subject":{"description":"Subject is the k8s resource on which hook blueprint needs to act on","type":"object","properties":{"name":{"type":"string"},"namespace":{"type":"string"},"type":{"type":"string"}}}}}}},"ignoreExceptions":{"type":"boolean"},"instantRecovery":{"type":"boolean"},"overwriteExisting":{"type":"boolean"},"pointInTime":{"type":"string","format":"date-time"},"profile":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"restoreClusterResources":{"type":"boolean"},"skipWaitForWorkloadReady":{"type":"boolean"},"targetNamespace":{"description":"The namespace into which something should be restored","type":"string"},"targetVsphereStorage":{"type":"string"},"transforms":{"description":"TransformsOrRefs describes all transformations for a suite of resources","type":"array","items":{"description":"TransformOrRef holds transformation for a single resource type or a reference to some transform set.","type":"object","properties":{"transformSetRef":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}},"x-kubernetes-preserve-unknown-fields":true}},"virtualMachineParameters":{"description":"VirtualMachineParameters defines restore parameters specific to virtual machines.","type":"object","properties":{"harvester":{"description":"Harvester represents restore parameters specific to virtual machines on the Harvester platform.","type":"object","properties":{"overrideVolumeImages":{"description":"OverrideVolumeImages maps VM image PVCs to be restored to existing VM image references\n(identified by name and namespace). After the restore, all references to VM images\nin the selected VM image PVCs will be replaced with the provided new VM image references.","type":"object","additionalProperties":{"description":"HarvesterImageOverride specifies a VM image override used during restoring a virtual machine\nin Harvester.","type":"object","properties":{"ignoreChecks":{"description":"IgnoreChecks determines whether to skip VM image checksum validation during\nthe restore process. If set to true, the image will be used without verifying its integrity.\nThis is useful when intentionally using a different VM image than the one used in the backup.","type":"boolean"},"name":{"description":"Name of the VM image used for override.","type":"string"},"namespace":{"description":"Namespace where the VM image is located.","type":"string"}}}}}},"preserveVMMacAddresses":{"description":"PreserveVMMacAddresses specifies whether to retain the original MAC addresses\non all network interfaces of virtual machines after restore.","type":"boolean"}}},"volumeClones":{"type":"boolean"}}},"retention":{"description":"Retention has the retention schedule for a policy","type":"object","properties":{"daily":{"type":"integer","format":"int64"},"hourly":{"type":"integer","format":"int64"},"monthly":{"type":"integer","format":"int64"},"table":{"description":"TimeTable is a collection of entries for a (retention) schedule\nEquivalent swagger model: TimeTable","type":"array","items":{"description":"TimeTableEntry Entry / row in a time table containing a retention count and a\ncrontab specification for when the action should occur\nEquivalent swagger model: TimeTableEntry","type":"object","properties":{"count":{"description":"Number of artifacts to retain for this Entry","type":"integer","format":"int64"},"crontab":{"description":"crontab entry (line) specifying when the action should occur.\nSee `man crontab` and https://en.wikipedia.org/wiki/Cron#CRON_expression","type":"string"}}}},"weekly":{"type":"integer","format":"int64"},"yearly":{"type":"integer","format":"int64"}}},"retireParameters":{"description":"RetireParameters retire parameters","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"retireIndex":{"description":"RetireIndex counts up with each retirement by a policy; zero indicates uncounted","type":"integer"}}},"stageParameters":{"description":"StageParameters are the parameters for a stage action\nswagger:model StageParameters","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"transformations":{"description":"Transformations are the transformations to apply to the staged data\nbefore it is staged.\nThis is a list of transformation references or inline transformations.\nIf this is empty, no transformations are applied.\nFor stage actions, transformations are currently only useful for PVCs\nsince only PVCs are staged. For other resources, transformations\ncan be applied during the restore action.","type":"array","items":{"description":"TransformOrRef holds transformation for a single resource type or a reference to some transform set.","type":"object","properties":{"transformSetRef":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}},"x-kubernetes-preserve-unknown-fields":true}}}},"upgradeParameters":{"type":"object","properties":{"profile":{"description":"Profile reference","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}}}},"validateParameters":{"description":"ValidateParameters are the parameters for a validate action\nswagger:model ValidateParameters","type":"object","properties":{"actionPodSpec":{"description":"ActionPodSpec reference to ActionPodSpec CR which will be used for pods created during the operation.","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"filters":{"description":"ActionFilters specifies filters that can be applied to resources that an action\noperates on. All filters are ANDed.","type":"object","properties":{"excludeClusterResources":{"description":"ExcludeCluster specifies which cluster-scope resource to exclude based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"excludeResources":{"description":"ExcludeResources specifies which resource types to include based on a\nResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeClusterResources":{"description":"IncludeCluster specifies which cluster-scope resources to include based\non a ResourceMatcher.","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}},"includeResources":{"description":"IncludeResources specifies which resource types to include based on a\nResourceMatcher.\nKanister does not contain k8s:openapi-gen annotations, so we must exclude these","type":"array","items":{"description":"ResourceRequirement allows specifying a resource requirement by type and/or name","type":"object","properties":{"group":{"type":"string"},"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}},"name":{"description":"Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names","type":"string","default":""},"resource":{"type":"string"},"version":{"type":"string"}},"x-kubernetes-map-type":"atomic"}}}},"volumeDataCheckOptions":{"description":"VolumeDataCheckOptions is a structure that holds the options applicable for when the\ndry run mode is volume data check.","type":"object","properties":{"failFast":{"description":"FailFast will cause any issues found while checking volume data to immediately cease the\ncheck and return the report. If unset, and by default, the volume data check will\ncontinue after finding errors and accumulate multiple error outputs at a time.","type":"boolean"},"verifyFilesPercent":{"description":"VerifyFilesPercent gives the percent of files to be randomly downloaded to verify their content.\nValid values are strings representing floats in the range [0.0 .. 100.0].","type":"string"}}}}}}}},"backupWindow":{"description":"OperationalWindow has a time frame within which policy should be executed","type":"object","required":["end","start"],"properties":{"end":{"description":"TimeOfDay has time of the day","type":"object","required":["hour","minute"],"properties":{"hour":{"type":"integer","format":"int32"},"minute":{"type":"integer","format":"int32"}}},"start":{"description":"TimeOfDay has time of the day","type":"object","required":["hour","minute"],"properties":{"hour":{"type":"integer","format":"int32"},"minute":{"type":"integer","format":"int32"}}}}},"comment":{"description":"User-defined description for this policy","type":"string"},"createdBy":{"type":"string"},"enableStaggering":{"type":"boolean"},"frequency":{"description":"Frequency indicates valid frequency values","type":"string"},"kdrSnapshotConfiguration":{"description":"KDRSnapshotConfiguration wraps the user intention to enable export of catalog pvc snapshot","type":"object","properties":{"exportCatalogSnapshot":{"description":"enable users to opt-in to exporting the catalog PVC data","type":"boolean"},"takeLocalCatalogSnapshot":{"description":"enable users to opt-out of creating a local catalog PVC snapshot","type":"boolean"}}},"lastModifyHash":{"type":"integer","format":"int32"},"modifiedBy":{"type":"string"},"paused":{"type":"boolean"},"presetRef":{"description":"Reference refers to a kubernetes custom resource object that is in the same\nAPI group as the referring object, thus the API version is elided. The object\nkind is also not included because it is determined by the referring object.\nWhen the type of the referenced object can change, then use\nK8sObjectReference instead","type":"object","required":["name"],"properties":{"name":{"description":"Name of the referenced object","type":"string"},"namespace":{"description":"Namespace where the object is located. If it is empty, it should be\ninterpreted as the same namespace of the referencing object, and not\n`default` by default.","type":"string"}}},"retention":{"description":"Retention has the retention schedule for a policy","type":"object","properties":{"daily":{"type":"integer","format":"int64"},"hourly":{"type":"integer","format":"int64"},"monthly":{"type":"integer","format":"int64"},"table":{"description":"TimeTable is a collection of entries for a (retention) schedule\nEquivalent swagger model: TimeTable","type":"array","items":{"description":"TimeTableEntry Entry / row in a time table containing a retention count and a\ncrontab specification for when the action should occur\nEquivalent swagger model: TimeTableEntry","type":"object","properties":{"count":{"description":"Number of artifacts to retain for this Entry","type":"integer","format":"int64"},"crontab":{"description":"crontab entry (line) specifying when the action should occur.\nSee `man crontab` and https://en.wikipedia.org/wiki/Cron#CRON_expression","type":"string"}}}},"weekly":{"type":"integer","format":"int64"},"yearly":{"type":"integer","format":"int64"}}},"selector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.","type":"object","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","type":"array","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.","type":"object","required":["key","operator"],"properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.","type":"array","items":{"type":"string"},"x-kubernetes-list-type":"atomic"}}},"x-kubernetes-list-type":"atomic"},"matchLabels":{"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object","additionalProperties":{"type":"string"}}},"x-kubernetes-map-type":"atomic"},"subFrequency":{"description":"SubFrequency has modifiers for a Frequency associated with a Policy or PolicyAction","type":"object","properties":{"days":{"type":"array","items":{"type":"integer","format":"int32"}},"hours":{"type":"array","items":{"type":"integer","format":"int32"}},"minutes":{"type":"array","items":{"type":"integer","format":"int32"}},"months":{"type":"array","items":{"type":"integer","format":"int32"}},"weekdays":{"type":"array","items":{"type":"integer","format":"int32"}}}}}},"status":{"description":"PolicyStatus defines the observed state of Policy","type":"object","properties":{"error":{"description":"List of errors with the policy (for example, due to validation failures)","type":"array","items":{"type":"string"}},"hash":{"description":"Hash of Spec","type":"integer","format":"int32"},"specModifiedTime":{"description":"Timestamp when spec last changed","type":"string","format":"date-time"},"validation":{"description":"Validation status","type":"string"}}}},"x-kubernetes-group-version-kind":[{"group":"config.kio.kasten.io","kind":"Policy","version":"v1alpha1"}]}